/**
  *APIMATICCalculatorLib
  *
  * This file was automatically generated by APIMATIC BETA v2.0 on 02/12/2016
  */

'use strict';
angular.module('APIMATICCalculatorLib').factory('SimpleCalculatorController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * Calculates the expression using the specified operation.
         * All parameters to the endpoint are supplied through the object with their names
         * being the key and their desired values being the value. A list of parameters that can be used are:
         * 
         *     {OperationTypeEnum} operation    Required parameter: The operator to apply on the variables
         *     {double} x    Required parameter: The LHS value
         *     {double} y    Required parameter: The RHS value
         * 
         * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
         *
         * @return {promise<double>}
         */
        getCalculate : function(input){
            //Assign default values
            input = input || {};

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/{operation}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "operation" : (input.operation != null)?input.operation:null
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "x" : input.x,
                "y" : input.y
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        }
    }
});